#!/usr/bin/env raku

use Ask;
use CheckWriter;

my $debug = 0; 

# initialize data with defaults
my $date = Date.new: now;
my @keys = <date pay-to amount memo>;
my %inputs = [
    date   => $date,
    pay-to => "",
    amount => 0,
    memo   => "",
];

while 1 {
    say();
    get-user-inputs :%inputs, :@keys, :$debug;
    say();
    say "Your entries:";
    for @keys -> $k {
        my $v = %inputs{$k};
        say "  $k: $v";
    }
    my $answer = ask "satisfactory (Y/n)? ";
    last if $answer !~~ /:i n/;
}

say();
say "Preparing the check with your inputs...";
# use the inputs to name the PDF file:
#   check-<bank>-<number>-<date>.pdf

#### subs ####
sub get-user-inputs(:%inputs!, :@keys!, :$debug) is export {
    %inputs<date>   = get-user-date :date(%inputs<date>), :$debug;
    %inputs<pay-to> = get-user-pay-to :pay-to(%inputs<pay-to>), :$debug;
    %inputs<amount> = get-user-amount :amount(%inputs<amount>), :$debug;
    %inputs<memo>   = get-user-memo :memo(%inputs<memo>), :$debug;
}

sub get-user-date(Date :$date! is copy, :$debug --> Date) {
    while 1 {
        my $answer = ask "date (default: $date): ";
        last if not $answer; # user accepts default input
        # check format
        if $answer !~~ /^\h* \d**4 '-' \d\d '-' \d\d \h* $/ {
            say "  ERROR: enter date as 'yyyy-mm-dd'";
        }
        else {
            $date = Date.new: $answer;
            last
        }
    }
    $date
}

sub get-user-pay-to(Str :$pay-to = "", :$debug --> Str) {
    my $answer;
    while 1 {
        if $pay-to {
            $answer = ask "pay-to (default: $pay-to): ";
            last if not $answer; # user accepts default input
        }
        else {
            $answer = ask "pay-to: ";
            last if $answer and $answer ~~ Str;
            say "  ERROR: input '$answer' is not a string or is empty";
        }
    }
    $answer;
}

sub get-user-amount(Real :$amount = 0; :$debug --> Real) {
    my $answer;
    while 1 {
        if $amount {
            $answer = ask "amount (default: $amount): ";
            last if not $answer; # user accepts default input
        }
        else {
            $answer = ask "amount: ";
            last if $answer and $answer ~~ Real;
            say "  ERROR: input $answer is not a number";
        }
    }
    $answer
}

sub get-user-memo(Str :$memo = "", :$debug --> Str) {
    my $answer;
    while 1 {
        if $memo {
            $answer = ask "memo (default: $memo): ";
            last if not $answer; # user accepts default input
        }
        else {
            $answer = ask "memo: ";
            last if not $answer; # user accepts empty input
            last if $answer and $answer ~~ Str;
            say "  ERROR: input $answer is not a number";
        }
    }
    $answer
}

=finish

my $usage = "Usage: {$*PROGRAM.basename} mode [options...][help]";
if !@*ARGS.elems {
    say $usage;
    exit;
}

my $resdir = './module-resources';
# options
my $debug  = 0;
my $pfil;
my $ufil;
my $cfil;

# modes
my $write  = 0;
my $show   = 0;
my $down   = 0;
sub z{$write=$show=$down=0}

for @*ARGS {
    # options
    when /^D/ { $debug = 1 }
    when /^h/  { help       }
    when /^'p=' (\S+) / {
        $pfil = ~$0;
    }
    when /^'u=' (\S+) / {
        $ufil = ~$0;
    }
    when /^'c=' (\S+) / {
        $cfil = ~$0;
    }
    # modes
    when /^w/  { $write = 1 }
    when /^s/  { $show  = 1 }
    when /^d ['=' (\S+)]? / {
        $down = 1;
        if $0.defined {
            $resdir = ~$0;
        }
    }
    default {
        say "FATAL: Unknown arg '$_'";
        exit;
    }
}

if $write {
    note "DEBUG: write check..." if $debug;
    # need to get the three input files located
    my $curdir = $*CWD;
    my $pdf = write-check $curdir, :$pfil, :$ufil, :$cfil, :$debug;
    say "See check file: $pdf";
}
elsif $show {
    note "DEBUG: show resources..." if $debug;
}
elsif $down {
    note "DEBUG: download resources into dir '$resdir'..." if $debug;
}

### subroutines ###
sub help{
    say qq:to/HERE/;
        $usage

        Modes
          w       - write a check to a PDF 
          s       - shows a list of the module's resources
          d[=DIR] - downloads the module's resources to the current directory
                      in a 'resources' subdirectory or the DIR directory
        Options
          p=P     - use the P file (in Hjson format) to define the payee
                      information (default: data/payee.hjson)
          u=U     - use the U file (in Hjson format) to define the user's bank account
                      information (default: data/user-acct.hjson)
          c=C     - use the C file (in Hjson format) to define the user's check
                      information (default: data/user-check.hjson)
          D       - debug

        Note: If the 'user*' and 'payee*' files don't exist the default files are:
                resources/example-payee.hjson
                resources/example-user-acct.hjson
                resources/example-user-check.hjson
      
    HERE
    exit;
}

sub read-inputs(:$debug) is export {
    
}



